(ns rest-api.classes.molecule.widgets.overview
  (:require
    [clojure.string :as str]
    [pseudoace.utils :as pace-utils]
    [rest-api.classes.generic-fields :as generic]
    [rest-api.formatters.object :as obj :refer [pack-obj]]))

(defn detection-status [m]
  {:data (some->> (:molecule/status m)
                  (map (fn [msh]
                         {:text (when-let [v (:molecule.status/value msh)]
                                  (str/capitalize (name v)))
                          :evidence (obj/get-evidence msh)}))
                  (first))
   :description "Signifies if the molecule is predicted to be present in the animal or was shown to be present in the organism through a direct detection method"})

(defn extraction-method [m]
  {:data (some->> (:molecule/extraction-method m)
                  (map (fn [em]
                         {:text (:molecule.extraction-method/text em)
                          :evidence (obj/get-evidence em)})))
   :description "Method used to extract the molecule during detection"})

(defn chebi-id [m]
  {:data (some->> (:molecule/database m)
                  (map (fn [d]
                         (when
                           (and
                             (= "ChEBI"
                                (:database/id
                                  (:molecule.database/database d)))
                             (= "CHEBI_ID"
                                (:database-field/id
                                  (:molecule.database/field d))))
                           (:molecule.database/accession d))))
                  (remove nil?)
                  (first))
   :description "ChEBI id of the molecule"})

(defn detection-method [m]
  {:data (some->> (:molecule/detection-method m)
                  (map (fn [dm]
                         {:text (:molecule.detection-method/text dm) ; this is not the same as that produced by ace see :WBMol:00006459
                          :evidence (obj/get-evidence dm)})))
   :description "Experimental tool used to detect molecule"})

(defn monoisotopic-mass [m]
  {:data (when-let [mm (:molecule/monoisotopic-mass m)]
           (format "%.3f" (first mm)))
   :description "Monoisotopic mass calculated from the chemical formula of the molecule"})

(defn formula [m]
  {:data (first (:molecule/formula m))
   :description "Molecular formula from ChEBI"})

(defn synonyms [m]
  {:data (:molecule/synonym m)
   :description "Other common names for the molecule"})

(defn iupac [m]
  {:data (first (:molecule/iupac m))
   :description "IUPAC name"})

(defn inchi-key [m]
  {:data (first (:molecule/inchikey m))
   :description "InChi structure key"})

(defn nonspecies-source [m]
  {:data (first (:molecule/nonspecies-source m))
   :description "Source of molecule when not generated by the organism being studied"})

(defn molecule-use [m]
  {:data (some->> (:molecule/use m)
                  (map (fn [mu]
                         {:text (:molecule.use/text mu)
                          :evidence (obj/get-evidence mu)})))
   :description "Reported uses/affects of the molecule with regards to nematode species biology"})

(defn- convert-value [value]
  ;; It appears that this is no longer needed accroding to:
  ;; https://github.com/WormBase/website/issues/6690
  value)

(defn biological-role [m]
  {:data (let [data (group-by
                      :paper_evidence
                      (flatten
                        (vals
                          {:br
                           (some->> (:molecule/biofunction-role m)
                                    (map (fn [br]
                                           {:value (obj/humanize-ident (:molecule.biofunction-role/value br))
                                            :column :biofunction_role
                                            :paper_evidence (some->> (:evidence/paper-evidence br)
                                                                     (first)
                                                                     (pack-obj))})))
                           :status
                           (some->> (:molecule/status m)
                                    (map (fn [s]
                                           {:value (obj/humanize-ident (:molecule.status/value s))
                                            :column :status
                                            :paper_evidence (some->> (:evidence/paper-evidence s)
                                                                     (first)
                                                                     (pack-obj))})))
                           :dm
                           (some->> (:molecule/detection-method m)
                                    (map (fn [dm]
                                           {:value (convert-value (:molecule.detection-method/text dm))
                                            :column :detection_method
                                            :paper_evidence (some->> (:evidence/paper-evidence dm)
                                                                     (first)
                                                                     (pack-obj))})))
                           :em
                           (some->> (:molecule/extraction-method m)
                                    (map (fn [em]
                                           {:value (convert-value (:molecule.extraction-method/text em))
                                            :column :extraction_method
                                            :paper_evidence (some->> (:evidence/paper-evidence em)
                                                                     (first)
                                                                     (pack-obj))})))})))]
           (not-empty
             (for [[k v] (seq data)]
               (when (some? k)
                 (let [columns (group-by :column v)]
                   {:biofunction_role (map :value (:biofunction_role columns))
                    :status (map :value (:status columns))
                    :detection_method  (map :value (:detection_method columns))
                    :extraction_method (map :value (:extraction_method columns))
                    :paper_evidence k})))))
   :desciption "Controlled vocabulary for specific role of molecule in nematode biology, with particular regards to biological pathways"})

(defn smiles [m]
  {:data (first (:molecule/smiles m))
   :description "SMILES structure"})

(defn inchi [m]
  {:data (first (:molecule/inchi m))
   :description "InChi structure"})

(defn biofunction-role [m]
  {:data (when-let [brs (:molecule/biofunction-role m)]
           (for [br brs]
             {:text (str/capitalize
                      (name
                        (:molecule.biofunction-role/value br)))
              :evidence (obj/get-evidence br)}))
   :description "Controlled vocabulary for specific role of molecule in nematode biology, with particular regards to biological pathways"})

(def widget
  {:name generic/name-field
   :detection_status detection-status
   :extraction_method extraction-method
   :chebi_id chebi-id
   :detection_method detection-method
   :monoisotopic_mass monoisotopic-mass
   :formula formula
   :synonyms synonyms
   :remarks generic/remarks
   :iupac iupac
   :inchi_key inchi-key
   :nonspecies_source nonspecies-source
   :molecule_use molecule-use
   :biological_role biological-role
   :smiles smiles
   :inchi inchi
   :biofunction_role biofunction-role})
