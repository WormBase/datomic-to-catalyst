(ns rest-api.classes.variation.widgets.isolation
  (:require
    [rest-api.classes.generic :as generic]
    [rest-api.classes.variation.generic :as variation-generic]
    [pseudoace.utils :as pace-utils]
    [rest-api.formatters.object :as obj :refer  [pack-obj]]))

(defn laboratory [variation]
  {:data (if-let [labs (:variation/laboratory variation)]
           (for [lab labs]
             (let [representatives (:laboratory/representative lab)]
               {:laboratory {:id (:laboratory/id lab)
                             :label (first (:laboratory/mail lab))
                             :class "laboratory"
                             :taxonomy "all"}
                :representative (if (nil? representatives)
                                  nil
                                  (for [representative representatives]
                                    (pack-obj representative)))})))
   :description "the laboratory where the Variation was isolated, created, or named"})

(defn transposon-excision [variation]
  {:data nil
   :description "was the variation generated by a transposon excision event, and if so, of which family?"})

(defn derivative [variation]
  {:data nil
   :description "variations derived from this variation"})

(defn derived-from [variation]
  {:data nil
   :description "variation from which this one was derived"})

(defn external-source [variation]
  {:data nil
   :description "dbSNP ss#, if known"})

(defn isolated_via_reverse_genetics [variation]
  {:data nil
   :description "was the mutation isolated by reverse genetics?"})

(defn transposon-insertion [variation]
  {:data nil
   :description "was the variation generated by a transposon insertion event, and if so, of which family?"})

(defn isolated-by [variation]
  {:data (if (nil? (:variation/person variation))
           nil
           (pack-obj (first (:variation/person variation))))
   :description "the person credited with generating the mutation"})

(defn mutagen [variation]
  {:data nil
   :description "mutagen used to generate the variation"})

(defn isolated-by-author [variation]
  {:data  (if (nil? (:variation/author variation))
           nil
           (pack-obj (first (:variation/author variation))))

   :description "the author credited with generating the mutation"})

(defn isolated-via-forward-genetics [variation]
  {:data nil
   :description "was the mutation isolated by forward genetics?"})

(defn date-isolated [variation]
  {:data (:variation/date variation)
   :description "date the mutation was isolated"})

(def widget
  {:name  variation-generic/name-field
   :laboratory laboratory
   :transposon_excision transposon-excision
   :derivative derivative
   :derived_from derived-from
   :external_source external-source
   :isolated-via-reverse-genetics isolated_via_reverse_genetics
   :transposon_insertion transposon-insertion
   :isolated_by isolated-by
   :mutagen mutagen
   :isolated_by_author isolated-by-author
   :isolated_via_forward_genetics isolated-via-forward-genetics
   :date_isolated date-isolated})
