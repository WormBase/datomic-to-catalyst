(ns rest-api.classes.variation.widgets.isolation
  (:require
    [rest-api.classes.generic-fields :as generic]
    [rest-api.formatters.date :as dates]
    [rest-api.formatters.object :as obj :refer [pack-obj]]))

(defn transposon-excision [variation]
  {:data (some->> (:variation/transposon-excision variation)
                  (first)
                  (:transposon-family/id))
   :description "was the variation generated by a transposon excision event, and if so, of which family?"})

(defn derivative [variation]
  {:data (some->> (:variation/_derived-from-variation variation)
                  (map pack-obj))
   :description "variations derived from this variation"})

(defn derived-from [variation]
  {:data (some->> (:variation/derived-from-variation variation)
                  (first)
                  (pack-obj))
   :description "variation from which this one was derived"})

(defn external-source [variation]
  {:data (some->> (:variation/database variation)
                  (map (fn [h]
                         (let [d (:variation.database/database h)]
                           (when (= "dbSNP_ss" (:database/id d))
                             (when-let [id (:variation.database/accession h)]
                             {:remote_url (:database/url d)
                              :remote_text (str "dbSNP: " id)})))))
                  (remove nil?)
                  (first))
   :description "dbSNP ss#, if known"})

(defn isolated_via_reverse_genetics [variation]
  {:data (:variation.reverse-genetics/text
           (first (:variation/reverse-genetics variation)))
   :description "was the mutation isolated by reverse genetics?"})

(defn transposon-insertion [variation]
  {:data (some->> (:variation/transposon-insertion variation)
                  (first)
                  (:transposon-family/id))
   :description "was the variation generated by a transposon insertion event, and if so, of which family?"})

(defn isolated-by [variation]
  {:data (some->> (:variation/person variation)
                  (first)
                  (pack-obj))
   :description "the person credited with generating the mutation"})

(defn mutagen [variation]
  {:data (when-let [m (:variation/mutagen variation)]
           {:text (:variation.mutagen/text m)
            :evidence (obj/get-evidence m)})
   :description "mutagen used to generate the variation"})

(defn isolated-by-author [variation]
  {:data (some->> (:variation/author variation)
                  (first)
                  (pack-obj))
   :description "the author credited with generating the mutation"})

(defn isolated-via-forward-genetics [variation]
  {:data (some->> (:variation/forward-genetics variation)
                  (first)
                  (:variation.forward-genetics/text))
   :description "was the mutation isolated by forward genetics?"})

(defn date-isolated [variation]
  {:data (when-let [d (first (:variation/date variation))]
           (dates/format-date4 d))
   :description "date the mutation was isolated"})

(def widget
  {:name  generic/name-field
   :laboratory generic/laboratory
   :transposon_excision transposon-excision
   :derivative derivative
   :derived_from derived-from
   :external_source external-source
   :isolated-via-reverse-genetics isolated_via_reverse_genetics
   :transposon_insertion transposon-insertion
   :isolated_by isolated-by
   :mutagen mutagen
   :isolated_by_author isolated-by-author
   :isolated_via_forward_genetics isolated-via-forward-genetics
   :date_isolated date-isolated})
